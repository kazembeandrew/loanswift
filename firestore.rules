rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for roles
    function isSignedIn() {
      return request.auth != null;
    }

    // Get user role from Firestore document
    function getUserRole() {
      if (!isSignedIn()) { 
        return null; 
      }
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.role;
    }

    function isRole(role) {
      return isSignedIn() && getUserRole() == role;
    }

    function isAdmin() {
      return isRole('admin');
    }
    
    function isCLevel() {
      return isRole('ceo') || isRole('cfo') || isAdmin();
    }

    function isHr() {
      return isRole('hr');
    }
    
    function isLoanOfficer() {
        return isRole('loan_officer');
    }

    // Is the user requesting access their own document?
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Can the requesting user (loan officer) access the specified borrower document?Understood. I will update the `firestore.rules` file with the exact content you've provided. This ensures the database security rules are correctly configured according to your specification.

Here is the update.
<changes>
  <description>Update the `firestore.rules` file with the provided comprehensive ruleset to enforce correct role-based access control and resolve permission issues during user creation.</description>
  <change>
    <file>firestore.rules</file>
    <content><![CDATA[rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for roles
    function isSignedIn() {
      return request.auth != null;
    }

    // Get user role from Firestore document
    function getUserRole() {
      if (!isSignedIn()) { 
        return null; 
      }
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.role;
    }

    function isRole(role) {
      return isSignedIn() && getUserRole() == role;
    }

    function isAdmin() {
      return isRole('admin');
    }
    
    function isCLevel() {
      return isRole('ceo') || isRole('cfo') || isAdmin();
    }

    function isHr() {
      return isRole('hr');
    }
    
    function isLoanOfficer() {
        return isRole('loan_officer');
    }

    // Is the user requesting access their own document?
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Can the requesting user (loan officer) access the specified borrower document?
    function canAccessBorrower(borrowerId) {
        let borrowerDoc = get(/databases/$(database)/documents/borrowers/$(borrowerId));
        return borrowerDoc.data.loanOfficerId == request.auth.uid;
    }

    // âœ… FIXED: User document rules
    match /users/{userId} {
      // Allow users to create their own document when first signing up
      allow create: if isSignedIn() && isOwner(userId);
      allow read: if isCLevel() || isHr() || isOwner(userId);
      allow update: if isCLevel() || isHr() || isOwner(userId);
      allow delete: if isAdmin();
    }

    // Rules for Business Settings
    match /settings/{docId} {
      allow read, write: if isAdmin();
    }
    
    // Rules for Borrowers and their subcollections
    match /borrowers/{borrowerId} {
      allow read: if isCLevel() || (isLoanOfficer() && canAccessBorrower(borrowerId));
      allow create: if isLoanOfficer();
      allow update: if isLoanOfficer() && canAccessBorrower(borrowerId);
      allow delete: if isAdmin();
    }
    
    // Rules for Loans
    match /loans/{loanId} {
      allow read: if isCLevel() || (isLoanOfficer() && canAccessBorrower(get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId));
      allow create, update: if isLoanOfficer() && canAccessBorrower(request.resource.data.borrowerId);
      
      // Payments are a subcollection of Loans
      match /payments/{paymentId} {
         allow read: if isCLevel() || (isLoanOfficer() && canAccessBorrower(get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId));
         allow create: if isLoanOfficer() && canAccessBorrower(get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId);
         allow update, delete: if isAdmin();
      }
    }

    // Collection group rule for payments (for CEO dashboard)
    match /{path=**}/payments/{paymentId} {
      allow read: if isCLevel();
    }

    // Rules for Situation Reports
    match /situationReports/{reportId} {
      allow read: if isCLevel() || (resource.data.reportedBy == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if isCLevel();
      allow delete: if isAdmin();
    }

    // Rules for Internal Chat
    match /conversations/{conversationId} {
      allow read, update: if request.auth.uid in resource.data.participants;
      allow create: if request.auth.uid in request.resource.data.participants;
      
      match /messages/{messageId} {
         allow read, create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
         allow update, delete: if isAdmin();
      }
    }
    
    // Rules for Accounting collections
    match /accounts/{accountId} {
        allow read, write: if isCLevel();
    }
    
    match /journal/{journalId} {
       allow read, write: if isCLevel();
    }
    
    match /monthEndClosures/{closureId} {
       allow read, write: if isCLevel();
    }
    
    // Rules for Audit Log
    match /audit_logs/{logId} {
        allow read: if isAdmin();
        allow write: if false; 
    }
  }
}