
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // A user's role is stored in their custom claims.
    function getRole() {
      return request.auth.token.role;
    }

    function isLoanOfficer() {
      return getRole() == 'loan_officer';
    }

    function isAdmin() {
      return getRole() == 'admin';
    }

    function isCeo() {
        return getRole() == 'ceo';
    }

    function isCfo() {
        return getRole() == 'cfo';
    }
    
    function isHr() {
        return getRole() == 'hr';
    }

    // Admin roles have wide-ranging access
    function isManagement() {
      return isAdmin() || isCeo() || isCfo();
    }
    
    function isStaff() {
        return request.auth != null && getRole() in ['admin', 'ceo', 'cfo', 'hr', 'loan_officer'];
    }

    // Users can read their own profile, Admins/HR can read any profile.
    // Any authenticated user can create their own profile document.
    // Only Admins/HR can update roles.
    match /users/{userId} {
      allow read: if isManagement() || isHr() || request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update: if isManagement() || isHr();
    }

    // Only management can read or write settings.
    match /settings/{docId} {
      allow read, write: if isManagement();
    }

    // Loan officers can read/write their own borrowers. Management can access any.
    match /borrowers/{borrowerId} {
      allow list: if isManagement();
      allow get: if isManagement() || resource.data.loanOfficerId == request.auth.uid;
      allow create: if isStaff() && request.resource.data.loanOfficerId == request.auth.uid;
      allow update: if isManagement() || resource.data.loanOfficerId == request.auth.uid;
    }
    
    // Loan officers can CRUD loans for their borrowers. Management can access any.
    match /loans/{loanId} {
      allow list: if isManagement();
      allow get: if isManagement() || get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid;
      allow create: if isStaff() && get(/databases/$(database)/documents/borrowers/$(request.resource.data.borrowerId)).data.loanOfficerId == request.auth.uid;
      allow update: if isManagement() || get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid;
    }

    match /{path=**}/payments/{paymentId} {
        allow list, read: if isManagement();
        allow create, update: if isStaff();
    }

    match /conversations/{conversationId} {
        allow list: if request.auth.uid in resource.data.participants;
        allow get: if isManagement() || request.auth.uid in resource.data.participants;
        allow create: if isStaff() && request.auth.uid in request.resource.data.participants;
        allow update: if request.auth.uid in resource.data.participants;
    }

    match /conversations/{conversationId}/messages/{messageId} {
        allow read, create: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
    }
    
    // Accounting data is restricted to management roles
    match /accounts/{accountId} {
        allow list, read, create, update: if isManagement();
    }
    
    match /journal/{entryId} {
        allow list, read, create: if isManagement();
    }

    match /monthEndClosures/{closureId} {
        allow read: if isManagement();
        allow create: if isCfo() && request.resource.data.initiatedBy == request.auth.uid;
        allow update: if (isCeo() && request.resource.data.status == 'pending_approval') || 
                         (isCfo() && request.resource.data.status == 'approved');
    }
    
    match /situationReports/{reportId} {
      allow create: if isStaff();
      allow read, list: if isManagement() || resource.data.reportedBy == request.auth.uid;
      allow update: if isManagement();
    }

  }
}
