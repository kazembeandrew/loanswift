rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOneOfRoles(roles) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
    }

    // Admins have full access
    match /{document=**} {
      allow read, write: if isRole('admin');
    }

    match /users/{userId} {
      // Any authenticated user can read user profiles (needed for chat, etc.)
      allow get, list: if isAuth();
      // Only the user themselves or an admin can update their own profile
      allow update: if isOwner(userId) || isRole('admin');
    }

    match /borrowers/{borrowerId} {
      // Loan officers can only access borrowers assigned to them.
      // Higher roles can access any borrower.
      allow get, list: if isAuth() && (resource.data.loanOfficerId == request.auth.uid || isOneOfRoles(['admin', 'ceo', 'cfo']));
      allow create, update: if isAuth() && isOneOfRoles(['admin', 'ceo', 'cfo', 'loan_officer']);
    }

    match /loans/{loanId} {
      function getBorrowerId() {
        return get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId;
      }
      function isLoanOfficerForLoan() {
        let borrowerDoc = get(/databases/$(database)/documents/borrowers/$(getBorrowerId()));
        return borrowerDoc.data.loanOfficerId == request.auth.uid;
      }
      allow get, list: if isAuth() && (isLoanOfficerForLoan() || isOneOfRoles(['admin', 'ceo', 'cfo']));
      allow create, update: if isAuth() && (isLoanOfficerForLoan() || isOneOfRoles(['admin', 'ceo', 'cfo']));
    }

    // Payments are a subcollection of loans, we must use collectionGroup queries.
    match /{path=**}/payments/{paymentId} {
        allow read: if isAuth(); // Simplification: any logged-in user can read payment subcollections for now
    }

    match /conversations/{conversationId} {
        allow get: if isAuth() && request.auth.uid in resource.data.participants;
        // A user can create a conversation if their UID is in the new document's participants list.
        allow create: if isAuth() && request.auth.uid in request.resource.data.participants;
        allow list: if isAuth() && request.auth.uid in request.query.where.value;
        allow update: if isAuth() && request.auth.uid in resource.data.participants; // For sending messages
    }
    
    match /conversations/{conversationId}/messages/{messageId} {
        // Participants of a conversation can read and write messages
        allow read, write: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }

    match /situationReports/{reportId} {
        // Any authenticated user can create a report
        allow create: if isAuth();
        // Users can read reports they filed or if they are management
        allow get, list: if isAuth() && (resource.data.reportedBy == request.auth.uid || isOneOfRoles(['admin', 'ceo', 'cfo']));
        // Only management can update the status
        allow update: if isAuth() && isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    match /settings/{docId} {
        allow get: if isAuth();
        allow write: if isRole('admin');
    }
    
    match /accounts/{accountId} {
      allow get, list, write: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    match /journal/{entryId} {
      allow get, list, write: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    match /monthEndClosures/{closureId} {
        allow get, list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
        allow create: if isRole('cfo');
        allow update: if (isRole('ceo') && request.resource.data.status == 'approved') || (isRole('cfo') && request.resource.data.status == 'processed');
    }
  }
}
