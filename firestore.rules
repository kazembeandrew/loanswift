
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for roles
    function isLoanOfficerOrAbove() {
      return request.auth.token.role in ['loan_officer', 'cfo', 'ceo', 'admin'];
    }

    function isAdminOrBusinessOwner() {
      return request.auth.token.role in ['admin', 'ceo', 'cfo'];
    }

    function isHrOrAdmin() {
      return request.auth.token.role in ['admin', 'hr'];
    }

    // Users can read all profiles, but only update their own (or admins can update any)
    match /users/{userId} {
      allow get, list: if request.auth != null;
      allow update: if request.auth.uid == userId || isAdminOrBusinessOwner();
      allow create, delete: if isAdminOrBusinessOwner();
    }

    // Borrowers can only be accessed by their assigned loan officer or admins/ceo/cfo
    match /borrowers/{borrowerId} {
      allow get: if isLoanOfficerOrAbove() && (resource.data.loanOfficerId == request.auth.uid || isAdminOrBusinessOwner());
      allow list: if isLoanOfficerOrAbove();
      allow create: if isLoanOfficerOrAbove();
      allow update: if isLoanOfficerOrAbove() && (resource.data.loanOfficerId == request.auth.uid || isAdminOrBusinessOwner());
      allow delete: if isAdminOrBusinessOwner();
    }

    // Loans follow the same logic as borrowers via the borrowerId
    match /loans/{loanId} {
      allow get: if isLoanOfficerOrAbove(); // Further checks might be needed depending on query patterns
      allow list: if isLoanOfficerOrAbove();
      allow create: if isLoanOfficerOrAbove();
      allow update: if isLoanOfficerOrAbove();
      allow delete: if isAdminOrBusinessOwner();
    }
    
    // Payments are a subcollection of loans
    match /loans/{loanId}/payments/{paymentId} {
        allow read, write: if isLoanOfficerOrAbove();
    }
    
    // Allow loan officers and above to query across all payments
    match /{path=**}/payments/{paymentId} {
      allow read: if isLoanOfficerOrAbove();
    }

    // Settings can only be modified by admins
    match /settings/{settingId} {
      allow read, write: if isAdminOrBusinessOwner();
    }
    
    // Journal and Accounts are restricted to financial roles
    match /accounts/{accountId} {
        allow get, list, create, update, delete: if isAdminOrBusinessOwner();
    }
    
    match /journal/{journalId} {
        allow get, list, create, update, delete: if isAdminOrBusinessOwner();
    }

    // Conversations can only be read/written by participants
    match /conversations/{conversationId} {
      allow get, list: if request.auth.uid in resource.data.participants;
      allow create: if request.auth.uid in request.resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // Situation reports can be created by loan officers, but only read by them or admins.
    match /situationReports/{reportId} {
        allow create: if isLoanOfficerOrAbove();
        allow get, list: if isLoanOfficerOrAbove();
        allow update: if isAdminOrBusinessOwner(); // Only admins/ceo/cfo can change status
    }
    
    // Month-end closures have specific role-based permissions
    match /monthEndClosures/{closureId} {
        allow get: if isLoanOfficerOrAbove();
        allow create: if request.auth.token.role == 'cfo'; // Only CFOs can initiate
        allow update: if (request.resource.data.status == 'approved' && request.auth.token.role == 'ceo') || // CEO approves
                         (request.resource.data.status == 'processed' && request.auth.token.role == 'cfo' && resource.data.status == 'approved'); // CFO processes approved
    }
  }
}
