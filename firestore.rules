rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getRole() == 'admin';
    }
    
    function isCeo() {
        return isSignedIn() && getRole() == 'ceo';
    }

    function isCfo() {
        return isSignedIn() && getRole() == 'cfo';
    }
    
    function isCLevel() {
        return isAdmin() || isCeo() || isCfo();
    }
    
    function isHr() {
        return isSignedIn() && getRole() == 'hr';
    }

    function isLoanOfficer() {
      return isSignedIn() && getRole() == 'loan_officer';
    }
    
    function isApprovedStaff() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'approved';
    }

    // --- Collection Rules ---

    // Users: C-Level & HR can manage users. Admins have full control. Users can see/edit their own profiles.
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow read: if isCLevel() || isHr() || isOwner(userId);
      allow update: if isCLevel() || isHr() || isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Borrowers: Loan officers can manage their own borrowers. C-Level can view all.
    match /borrowers/{borrowerId} {
        allow read, write: if isApprovedStaff() && (isCLevel() || resource.data.loanOfficerId == request.auth.uid);
    }
    
    // Loans & Payments: Loan officers can manage loans for their borrowers. C-Level can view all.
    match /loans/{loanId} {
        allow read, write: if isApprovedStaff() && (
            isCLevel() || get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid
        );
        
        // Payments Subcollection
        match /payments/{paymentId} {
             allow read, write: if isApprovedStaff() && (
                isCLevel() || get(/databases/$(database)/documents/borrowers/$(get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId)).data.loanOfficerId == request.auth.uid
            );
        }
    }
    
    // Situation Reports: Staff can create. C-Level can read all. Loan Officers can only read reports for their borrowers.
    match /situationReports/{reportId} {
        allow create: if isApprovedStaff();
        allow read: if isApprovedStaff() && (
            isCLevel() || resource.data.reportedBy == request.auth.uid || get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid
        );
        allow update: if isCLevel(); // C-Level can update status
    }
    
    // Settings: Only CEO and Admins can read or write.
    match /settings/{docId} {
        allow read, write: if isSignedIn() && (isCeo() || isAdmin());
    }

    // Chat: Participants of a conversation can read/write to it.
    match /conversations/{conversationId} {
        allow read, update: if isSignedIn() && request.auth.uid in resource.data.participants;
        allow create: if isSignedIn();

        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
    }

    // Financials (Accounts, Journal, Closures): Restricted to C-Level roles for all operations.
    match /accounts/{accountId} {
        allow read, write: if isCLevel();
    }
    match /journal/{entryId} {
        allow read, write: if isCLevel();
    }
     match /monthEndClosures/{closureId} {
        allow read, write: if isCLevel();
    }

    // Audit Logs: Write-only for the backend (via admin SDK), read-only for admins.
    match /audit_logs/{logId} {
        allow read: if isAdmin();
        allow write: if false; // Can only be written by admin SDK
    }
  }
}
