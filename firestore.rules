rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserRole() {
      return request.auth.token.role;
    }

    function isOneOfRoles(roles) {
      return isSignedIn() && getUserRole() in roles;
    }
    
    function isAdmin() {
      return isOneOfRoles(['admin']);
    }
    
    function isCLevel() {
      return isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    function isHR() {
      return isOneOfRoles(['hr']);
    }

    // --- User Profiles ---
    match /users/{userId} {
      // Admins and HR can manage users. Users can read/update their own profile.
      allow read, update: if isCLevel() || isHR() || request.auth.uid == userId;
      // Only admins/HR can create/delete users via server-side actions.
      allow create, delete: if isCLevel() || isHR();
    }
    
    // --- Business Settings ---
    match /settings/{docId} {
      // Only admins can read or write business settings.
      allow read, write: if isAdmin();
    }

    // --- Borrowers ---
    match /borrowers/{borrowerId} {
      // C-level can list/read all. Loan officers can only read their own assigned borrowers.
      allow list, get: if isCLevel() || (resource.data.loanOfficerId == request.auth.uid);
      // C-level can create/update. Loan officers can only create/update their own.
      allow create, update: if isCLevel() || (request.resource.data.loanOfficerId == request.auth.uid);
      // Only Admins can delete.
      allow delete: if isAdmin();
    }
    
    // --- Loans and Payments ---
    match /loans/{loanId} {
      // C-level can list/read all loans. Loan officers can only read loans of their assigned borrowers.
      allow list, get: if isCLevel() || get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid;
      // C-level can create/update. Loan officers can only create/update for their own borrowers.
      allow create, update: if isCLevel() || get(/databases/$(database)/documents/borrowers/$(request.resource.data.borrowerId)).data.loanOfficerId == request.auth.uid;
      // Only Admins can delete.
      allow delete: if isAdmin();

      // Payments Subcollection
      match /payments/{paymentId} {
        // C-level can read all. Loan officers can read payments on loans of their assigned borrowers.
        allow get: if isCLevel() || get(/databases/$(database)/documents/borrowers/$(get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId)).data.loanOfficerId == request.auth.uid;
        // Anyone who can read the loan can also create a payment for it.
        allow create, list: if isCLevel() || get(/databases/$(database)/documents/borrowers/$(get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId)).data.loanOfficerId == request.auth.uid;
      }
    }
    
    // Rule for Collection Group query on 'payments'
    match /{path=**}/payments/{paymentId} {
      // C-level roles can list payments across all loans.
      allow list: if isCLevel();
    }
    
    // --- Situation Reports ---
    match /situationReports/{reportId} {
      // C-level can read/list all. Loan officers can only read/list reports they filed or for their borrowers.
      allow list, get: if isCLevel() || resource.data.reportedBy == request.auth.uid || get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid;
      // Authenticated users can create reports.
      allow create: if isSignedIn();
      // C-level can update status. Loan officers can't.
      allow update: if isCLevel();
    }
    
    // --- Conversations and Messages ---
    match /conversations/{conversationId} {
      // Participants of a conversation can read, update, or delete it.
      allow get, update, delete: if isSignedIn() && request.auth.uid in resource.data.participants;
      // Any authenticated user can create a conversation, as long as they are a participant in it.
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participants;
      // Users can only list conversations they are part of.
      allow list: if isSignedIn() && request.auth.uid in resource.data.participants;

      // Messages Subcollection
      match /messages/{messageId} {
        // Participants can read/list messages in their conversations.
        allow list, get: if isSignedIn() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
        // Participants can create (send) messages in their conversations.
        allow create: if isSignedIn() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
      }
    }
    
    // --- Accounting ---
    match /accounts/{accountId} {
      // Only C-level roles can access the chart of accounts.
      allow read, write, list: if isCLevel();
    }
    
    match /journal/{entryId} {
      // Only C-level roles can access the general journal.
      allow read, write, list: if isCLevel();
    }
    
    match /monthEndClosures/{closureId} {
      // C-level roles can manage the month-end close process.
      allow read, write: if isCLevel();
    }
  }
}
