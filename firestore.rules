rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserApproved() {
      return isUserAuthenticated() && getUserData(request.auth.uid).status == 'approved';
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isUserRole(roles) {
      return isUserAuthenticated() && getUserData(request.auth.uid).role in roles;
    }

    function isLoanOfficer() {
      return isUserRole(['loan_officer']);
    }

    function isCLevel() {
      return isUserRole(['admin', 'ceo', 'cfo']);
    }

    function isHrOrAdmin() {
      return isUserRole(['admin', 'hr']);
    }

    //--- Collection Rules ---//

    // Users: Users can see their own profile. HR and Admins can see everyone's.
    match /users/{userId} {
      allow read: if isUserApproved() && (request.auth.uid == userId || isHrOrAdmin());
      allow write: if isUserApproved() && isHrOrAdmin();
      allow create: if isUserAuthenticated(); // Allow creation for initial signup
    }
    
    // Borrowers: Loan officers can read/write their own borrowers. C-Level can read all.
    match /borrowers/{borrowerId} {
      allow read: if isUserApproved() && 
                    (isCLevel() || (isLoanOfficer() && resource.data.loanOfficerId == request.auth.uid));
      allow write: if isUserApproved() && isLoanOfficer();
    }

    // Loans & Payments (subcollection)
    match /loans/{loanId} {
      allow read: if isUserApproved() && 
                    (isCLevel() || (isLoanOfficer() && get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid));
      allow write: if isUserApproved() && isLoanOfficer();

      match /payments/{paymentId} {
         allow read: if isUserApproved() && 
                    (isCLevel() || (isLoanOfficer() && get(/databases/$(database)/documents/borrowers/$(get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId)).data.loanOfficerId == request.auth.uid));
        // Payments are only created via server-side action, so client write is not needed.
        allow write: if false; 
      }
    }
    
    // Situation Reports
    match /situationReports/{reportId} {
       allow read, write: if isUserApproved() && 
                    (isCLevel() || (isLoanOfficer() && resource.data.reportedBy == request.auth.uid));
    }
    
    // Financials: C-Level roles only
    match /accounts/{accountId} {
      allow read, write: if isUserApproved() && isCLevel();
    }
    match /journal/{journalId} {
       allow read, write: if isUserApproved() && isCLevel();
    }
     match /monthEndClosures/{closureId} {
       allow read, write: if isUserApproved() && isCLevel();
    }

    // Chat: Participants of a conversation can read/write to it.
    match /conversations/{conversationId} {
      allow read, write: if isUserApproved() && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, write: if isUserApproved() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    // Settings: C-Level roles can read, Admins/CFO can write
    match /settings/{settingId} {
      allow read: if isUserApproved() && isCLevel();
      allow write: if isUserApproved() && isUserRole(['admin', 'cfo']);
    }
    
    // Audit Log: Read-only for Admins. No client-side writes.
    match /audit_logs/{logId} {
      allow read: if isUserApproved() && isUserRole(['admin']);
      allow write: if false;
    }
  }
}
