rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions to check user roles from their custom claims.
    function isLoanOfficerOrAbove() {
      return request.auth.token.role in ['loan_officer', 'ceo', 'admin', 'cfo', 'hr'];
    }

    function isAdminOrCfo() {
      return request.auth.token.role in ['admin', 'ceo', 'cfo'];
    }
    
    function isAdminOrHr() {
        return request.auth.token.role in ['admin', 'hr'];
    }

    // --- Collections ---

    // Users can be seen by any staff member, but only updated by themselves or an admin/hr.
    match /users/{userId} {
      allow get, list: if isLoanOfficerOrAbove();
      allow update: if request.auth.uid == userId || isAdminOrHr();
      // Allow creation during sign-up
      allow create: if request.auth.uid != null;
    }

    // Borrowers can be managed by any loan officer or above.
    match /borrowers/{borrowerId} {
      allow get, list, create, update: if isLoanOfficerOrAbove();
      // Delete is typically restricted.
      allow delete: if isAdminOrCfo();
    }

    // Loans follow the same logic as borrowers.
    match /loans/{loanId} {
      allow get, list, create, update: if isLoanOfficerOrAbove();
      allow delete: if isAdminOrCfo();
    }
    
    // Rule for the payments subcollection. A user can manage a payment
    // if they have access to the parent loan.
    match /loans/{loanId}/payments/{paymentId} {
        allow read, write: if isLoanOfficerOrAbove();
    }

    // Grant permission for the collection group query used by getAllPayments().
    // This allows authorized users to query the 'payments' collection across all loans.
    match /{path=**}/payments/{paymentId} {
      allow read: if isLoanOfficerOrAbove();
    }

    // Accounting data is restricted to financial and admin roles.
    match /accounts/{accountId} {
      allow get, list, create, update: if isAdminOrCfo();
      allow delete: if request.auth.token.role == 'admin'; // Only full admins can delete accounts
    }

    match /journal/{entryId} {
      allow get, list, create, update: if isAdminOrCfo();
      allow delete: if request.auth.token.role == 'admin';
    }

    // General settings can be read by anyone, but only written by top-level admins.
    match /settings/{settingId} {
      allow get: if isLoanOfficerOrAbove();
      allow write: if isAdminOrCfo();
    }

    // Chat conversations can only be accessed by their participants.
    match /conversations/{conversationId} {
      allow get, list: if request.auth.uid in resource.data.participants;
      // Creation is handled by the chat service logic, checking participants implicitly.
      allow create: if request.auth.uid in request.resource.data.participants;
      allow update: if request.auth.uid in resource.data.participants; // For updating lastMessage
    }
    
    // Messages within a conversation can only be accessed by participants.
    match /conversations/{conversationId}/messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }

    // Situation reports can be created by any loan officer or above, but only managed by admins.
    match /situationReports/{reportId} {
        allow create, get, list: if isLoanOfficerOrAbove();
        allow update, delete: if isAdminOrCfo();
    }
  }
}
