rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOneOfRoles(roles) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    // Admins have full access
    match /{document=**} {
      allow read, write: if isRole('admin');
    }

    // User profile rules
    match /users/{userId} {
      allow get: if isAuth();
      allow list: if isOneOfRoles(['admin', 'hr']);
      allow create: if isAuth(); // Admin creates users via backend, users can create their own doc on first login
      allow update: if request.auth.uid == userId || isOneOfRoles(['admin', 'hr']);
    }

    // Settings are admin-only
    match /settings/{docId} {
      allow read, write: if isOneOfRoles(['admin']);
    }

    // Borrower and Loan rules
    match /borrowers/{borrowerId} {
      allow get: if isAuth() && (resource.data.loanOfficerId == request.auth.uid || isOneOfRoles(['admin', 'ceo', 'cfo']));
      allow list: if isOneOfRoles(['admin', 'ceo', 'cfo']); // Allow admins/ceo/cfo to list all borrowers
      allow create: if isAuth();
      allow update: if isAuth() && (resource.data.loanOfficerId == request.auth.uid || isOneOfRoles(['admin']));
    }
    
    match /loans/{loanId} {
      allow get: if isAuth();
      allow list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
      allow create: if isAuth();
      allow update: if isOneOfRoles(['admin', 'cfo']);
    }
    
    match /loans/{loanId}/payments/{paymentId} {
      allow read, create: if isAuth();
    }
    
    // Rule for collection group query on 'payments'
    match /{path=**}/payments/{paymentId} {
        allow list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    // Situation Reports
    match /situationReports/{reportId} {
      allow get: if isAuth();
      allow list: if isAuth();
      allow create: if isAuth();
      allow update: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    // Conversations
    match /conversations/{conversationId} {
      allow get: if isAuth() && request.auth.uid in resource.data.participants;
      allow list: if isAuth() && request.auth.uid in resource.data.participants;
      allow create: if isAuth() && request.auth.uid in request.resource.data.participants;
      allow update: if isAuth() && request.auth.uid in resource.data.participants; // For updating lastMessage
    }
    
    match /conversations/{conversationId}/messages/{messageId} {
      allow read, create: if isAuth() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants[0] == request.auth.uid || get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants[1] == request.auth.uid;
    }
    
    // Accounting documents - restricted to financial roles
    match /accounts/{accountId} {
      allow get: if isOneOfRoles(['admin', 'ceo', 'cfo']);
      allow list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
      allow write: if isOneOfRoles(['admin', 'cfo']);
    }
    
    match /journal/{entryId} {
      allow get: if isOneOfRoles(['admin', 'ceo', 'cfo']);
      allow list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
      allow create: if isOneOfRoles(['admin', 'cfo']);
    }
    
    match /monthEndClosures/{closureId} {
        allow get: if isOneOfRoles(['admin', 'ceo', 'cfo']);
        allow list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
        allow create: if isRole('cfo');
        allow update: if (isRole('ceo') && request.resource.data.status == 'approved') || 
                         (isRole('cfo') && request.resource.data.status == 'processed');
    }
  }
}
