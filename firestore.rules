rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function userHasRole(roles) {
      return request.auth != null 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    function isAdmin() {
      return userHasRole(['ceo', 'admin', 'cfo']);
    }

    function isLoanOfficerOrAbove() {
      return userHasRole(['loan_officer', 'ceo', 'admin', 'cfo', 'hr']);
    }

    // User documents - allow users to create their own document
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || userHasRole(['admin', 'hr']);
    }
    
    match /loans/{loanId} {
      allow read, write: if isLoanOfficerOrAbove();
      
      match /payments/{paymentId} {
        allow read, write: if isLoanOfficerOrAbove();
      }
    }
    
    match /borrowers/{borrowerId} {
      allow read, write: if isLoanOfficerOrAbove();
    }
    
    match /settings/{settingId} {
      allow read: if isLoanOfficerOrAbove();
      allow write: if isAdmin();
    }
    
    match /situationReports/{reportId} {
      allow read, write: if isLoanOfficerOrAbove();
    }

    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;

      match /messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    match /accounts/{accountId} {
      allow read, write: if isAdmin();
    }

    match /journal/{entryId} {
      allow read, write: if isAdmin();
    }
  }
}
