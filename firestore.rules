
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions that check Firestore for roles
    function isSignedIn() {
      return request.auth != null;
    }

    // Get user role from Firestore document instead of token claims
    function getUserRole() {
      if (!isSignedIn()) { return null; }
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      // Check if the document exists and has data before accessing role
      if (userDoc != null && 'data' in userDoc && 'role' in userDoc.data) {
        return userDoc.data.role;
      }
      return null;
    }

    function isRole(role) {
      return isSignedIn() && getUserRole() == role;
    }

    function isAdmin() {
      return isRole('admin');
    }
    
    function isCLevel() {
      return isRole('ceo') || isRole('cfo') || isAdmin();
    }

    function isHr() {
      return isRole('hr');
    }
    
    function isLoanOfficer() {
        return isRole('loan_officer');
    }

    // Is the user requesting access their own document?
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Can the requesting user (loan officer) access the specified borrower document?
    function canAccessBorrower(borrowerId) {
        let borrowerDoc = get(/databases/$(database)/documents/borrowers/$(borrowerId));
        return borrowerDoc != null && borrowerDoc.data.loanOfficerId == request.auth.uid;
    }

    // --- Collection Rules ---

    // Rules for User Profiles
    match /users/{userId} {
      allow read: if isCLevel() || isHr() || isOwner(userId);
      // Anyone can create their own user doc upon first sign-in
      allow create: if isOwner(userId) || isCLevel() || isHr();
      allow update: if (isCLevel() || isHr()) || (isOwner(userId) && request.resource.data.keys().hasOnly(['displayName', 'photoURL', 'updatedAt']));
      allow delete: if isAdmin();
    }

    // Rules for Business Settings
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isCLevel();
    }
    
    // Rules for Borrowers and their subcollections
    match /borrowers/{borrowerId} {
      allow read: if isCLevel() || (isLoanOfficer() && canAccessBorrower(borrowerId));
      allow create: if isLoanOfficer();
      allow update: if isCLevel() || (isLoanOfficer() && canAccessBorrower(borrowerId));
      allow delete: if isAdmin();
    }
    
    // Rules for Loans
    match /loans/{loanId} {
      function getLoanData() {
        return get(/databases/$(database)/documents/loans/$(loanId)).data;
      }
      
      allow read: if isCLevel() || (isLoanOfficer() && canAccessBorrower(getLoanData().borrowerId));
      allow create: if isLoanOfficer() && canAccessBorrower(request.resource.data.borrowerId);
      allow update: if isCLevel() || (isLoanOfficer() && canAccessBorrower(getLoanData().borrowerId));
      
      // Payments are a subcollection of Loans
      match /payments/{paymentId} {
         allow read: if isCLevel() || (isLoanOfficer() && canAccessBorrower(getLoanData().borrowerId));
         // Creating a payment is part of a transaction, so we check the loan's borrower
         allow create: if isLoanOfficer() && canAccessBorrower(getLoanData().borrowerId);
         allow update, delete: if isAdmin();
      }
    }
    
    // Rules for Chat
    match /conversations/{conversationId} {
      allow read, create: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow update: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    // Rules for Financial Data
    match /accounts/{accountId} {
        allow read: if isCLevel();
        allow create, update: if isCLevel();
        allow delete: if isAdmin();
    }

    match /journal/{journalId} {
        allow read, create: if isCLevel();
        allow update, delete: if isAdmin();
    }
    
    match /monthEndClosures/{closureId} {
      allow read, create, update: if isCLevel();
    }
    
    // Rules for Reports
    match /situationReports/{reportId} {
      allow read: if isCLevel() || (isLoanOfficer() && canAccessBorrower(get(/databases/$(database)/documents/situationReports/$(reportId)).data.borrowerId));
      allow create: if isLoanOfficer();
      allow update: if isCLevel();
    }
    
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isSignedIn(); // Log creation is allowed if signed in, but should be handled by secure server-side logic
    }
    
  }
}
