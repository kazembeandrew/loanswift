rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOneOfRoles(roles) {
      return isSignedIn() && request.auth.token.role in roles;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Admins can do anything
    match /{document=**} {
      allow read, write: if isOneOfRoles(['admin']);
    }
    
    // settings: read by all, written by admins/ceo
    match /settings/business_config {
        allow read: if isSignedIn();
        allow write: if isOneOfRoles(['admin', 'ceo']);
    }

    // users:
    // - create: any signed-in user can create their own doc
    // - read: any signed-in user
    // - update: user can update their own doc, or hr/admin can update any
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow read: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(userId) || isOneOfRoles(['admin', 'hr']));
    }

    // borrowers:
    // - read/write: admins/cfo/ceo
    // - read/write: loan_officer for their own assigned borrowers
    match /borrowers/{borrowerId} {
      allow read, write: if isOneOfRoles(['admin', 'cfo', 'ceo']) 
                        || (isOneOfRoles(['loan_officer']) && resource.data.loanOfficerId == request.auth.uid);
    }
    
    // situationReports:
    // - read: admins/cfo/ceo can read all
    // - read: loan_officers can read reports they filed
    // - create: signed in users can create
    // - update: admins/cfo/ceo can update (e.g. status)
    match /situationReports/{reportId} {
        allow read: if isOneOfRoles(['admin', 'cfo', 'ceo'])
                    || (isOneOfRoles(['loan_officer']) && resource.data.reportedBy == request.auth.uid);
        allow create: if isSignedIn();
        allow update: if isOneOfRoles(['admin', 'cfo', 'ceo']);
    }

    // loans:
    // - read: admins/cfo/ceo can read all
    // - read: loan_officer can read loans of their borrowers
    // - write: admins/cfo/ceo
    match /loans/{loanId} {
      allow read: if isOneOfRoles(['admin', 'cfo', 'ceo']) 
                  || (isOneOfRoles(['loan_officer']) && get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid);
      allow write: if isOneOfRoles(['admin', 'cfo', 'ceo']);
    }

    // payments subcollection:
    // - read: if user can read the parent loan
    // - write: admins/cfo/ceo
    match /loans/{loanId}/payments/{paymentId} {
        allow read: if exists(/databases/$(database)/documents/loans/$(loanId)) && get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId in get(/databases/$(database)/documents/borrowers).docs.keys();
        allow write: if isOneOfRoles(['admin', 'cfo', 'ceo']);
    }
    
    // accounts & journal: only for c-level/admin
    match /accounts/{accountId} {
      allow read, write: if isOneOfRoles(['admin', 'cfo', 'ceo']);
    }
    match /journal/{entryId} {
      allow read, write: if isOneOfRoles(['admin', 'cfo', 'ceo']);
    }
    match /monthEndClosures/{closureId} {
      allow read, write: if isOneOfRoles(['admin', 'cfo', 'ceo']);
    }

    // audit_logs: write-only for authenticated users (server actions), read-only for admins
    match /audit_logs/{logId} {
        allow read: if isOneOfRoles(['admin']);
        allow create: if isSignedIn();
        allow update, delete: if false;
    }
    
    // conversations & messages
    match /conversations/{conversationId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participants;

      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
  }
}
