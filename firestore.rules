rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      return isAuth() && request.auth.token.role == role;
    }
    
    function isOneOfRoles(roles) {
      return isAuth() && request.auth.token.role in roles;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    match /users/{userId} {
      allow get: if isAuth();
      allow list: if isOneOfRoles(['admin', 'hr']);
      allow create: if isOneOfRoles(['admin', 'hr']);
      allow update: if isOneOfRoles(['admin', 'hr']) || isOwner(userId);
    }
    
    match /settings/{docId} {
      allow read, write: if isRole('admin');
    }

    match /borrowers/{borrowerId} {
      // Admins/CEOs/CFOs can list all borrowers
      allow list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
      
      // An admin/ceo/cfo or the assigned loan officer can get a single borrower document
      allow get: if isOneOfRoles(['admin', 'ceo', 'cfo']) || resource.data.loanOfficerId == request.auth.uid;
      
      // An authenticated user can create a borrower (client sets loanOfficerId to their own UID)
      allow create: if isAuth() && request.resource.data.loanOfficerId == request.auth.uid;
      
      // An admin/ceo/cfo or the assigned loan officer can update a borrower
      allow update: if isOneOfRoles(['admin', 'ceo', 'cfo']) || resource.data.loanOfficerId == request.auth.uid;
    }
    
    match /loans/{loanId} {
      allow read, create, update: if isAuth(); // Simplistic rule, can be tightened later
    }
    
    // This rule allows a collection group query on 'payments'
    match /{path=**}/payments/{paymentId} {
      allow read: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    match /situationReports/{reportId} {
      allow read, write: if isAuth(); // Allow any logged-in user to create/view for now
    }
    
    match /conversations/{conversationId} {
      // Users can only read/write conversations they are a part of.
      allow list, get: if isAuth() && request.auth.uid in resource.data.participants;
      allow create: if isAuth() && request.auth.uid in request.resource.data.participants;
    }
    
    match /conversations/{conversationId}/messages/{messageId} {
      // Users can only read/write messages in conversations they are a part of.
      allow read, create: if isAuth() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
    }
    
    match /accounts/{accountId} {
      allow read, write: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }
    
    match /journal/{entryId} {
      allow read, write: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    match /monthEndClosures/{closureId} {
      allow get, list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
      allow create: if isRole('cfo');
      allow update: if (isRole('ceo') && request.resource.data.status == 'approved') || 
                       (isRole('cfo') && request.resource.data.status == 'processed');
    }
  }
}
