rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isOneOfRoles(roles) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }
    
    function isOwner(userId) {
        return isAuth() && request.auth.uid == userId;
    }

    // ROLES
    // admin: Full access
    // ceo: High-level oversight
    // cfo: Financial management
    // hr: Human resources, user management
    // loan_officer: Manages assigned borrowers and loans

    // Users can read their own profile, admins/hr can manage all profiles
    match /users/{userId} {
      allow get: if isAuth();
      allow list: if isOneOfRoles(['admin', 'hr']);
      allow create: if isOneOfRoles(['admin', 'hr']);
      allow update: if isOwner(userId) || isOneOfRoles(['admin', 'hr']);
    }

    // Admins have full access to settings
    match /settings/{docId} {
      allow read: if isOneOfRoles(['admin', 'ceo', 'cfo', 'loan_officer']);
      allow write: if isOneOfRoles(['admin']);
    }

    // Admins/CEOs/CFOs can see all borrowers. Loan officers can see their own.
    match /borrowers/{borrowerId} {
        allow get: if isOneOfRoles(['admin', 'ceo', 'cfo']) || (isOneOfRoles(['loan_officer']) && resource.data.loanOfficerId == request.auth.uid);
        allow list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
        allow create, update: if isOneOfRoles(['admin', 'ceo', 'cfo', 'loan_officer']);
    }
    
    // Admins/CEOs/CFOs can see all loans. Loan officers can see loans of their borrowers.
    match /loans/{loanId} {
        allow get: if isOneOfRoles(['admin', 'ceo', 'cfo']) || (isOneOfRoles(['loan_officer']) && get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid);
        allow list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
        allow create, update: if isOneOfRoles(['admin', 'ceo', 'cfo', 'loan_officer']);
    }
    
    // Payments are a subcollection of loans.
    match /loans/{loanId}/payments/{paymentId} {
      allow read, create: if isOneOfRoles(['admin', 'ceo', 'cfo']) || (isOneOfRoles(['loan_officer']) && get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedBorrowerIds);
    }

    // Collection group query for payments requires a specific rule
    match /{path=**}/payments/{paymentId} {
      allow list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }
    
    // Situation reports
    match /situationReports/{reportId} {
      allow get, list, create, update: if isOneOfRoles(['admin', 'ceo', 'cfo', 'loan_officer']);
    }

    // Conversations can only be read/written by participants.
    match /conversations/{conversationId} {
      allow get, update: if isAuth() && request.auth.uid in resource.data.participants;
      allow list: if isAuth() && request.auth.uid in resource.data.participants;
      allow create: if isAuth() && request.auth.uid in request.resource.data.participants;
      
      // Messages can only be accessed by conversation participants
      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // Accounting documents are restricted to financial roles
    match /accounts/{accountId} {
      allow get, list, create, update: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }
    
    match /journal/{entryId} {
       allow get, list, create, update: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    // Month-End Closures have a specific workflow
    match /monthEndClosures/{periodId} {
      allow get: if isOneOfRoles(['admin', 'ceo', 'cfo']);
      allow create: if isOneOfRoles(['admin', 'cfo']); // CFOs or Admins can initiate
      allow update: if (isOneOfRoles(['admin', 'ceo']) && request.resource.data.status == 'approved') || // CEO/Admin can approve
                       (isOneOfRoles(['admin', 'cfo']) && resource.data.status == 'approved'); // CFO/Admin can process
    }
  }
}