rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =============================================
    // Helper Functions
    // =============================================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isCeo() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ceo';
    }

    function isCfo() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'cfo';
    }

    function isHr() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr';
    }

    function isLoanOfficer() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'loan_officer';
    }

    function isManagement() {
        return isAdmin() || isCeo() || isCfo();
    }
    
    function isStaff() {
        return isManagement() || isHr() || isLoanOfficer();
    }


    // =============================================
    // Collection Rules
    // =============================================

    match /users/{userId} {
      allow get: if isAuthenticated();
      allow list: if isStaff();
      allow create: if isOwner(userId) || isAdmin() || isHr();
      allow update: if isOwner(userId) || isAdmin() || isHr();
    }
    
    match /settings/{docId} {
      allow read, write: if isAdmin();
    }

    match /borrowers/{borrowerId} {
      // Management can see all borrowers. Loan officers can see borrowers they are assigned to.
      allow get: if isManagement() || resource.data.loanOfficerId == request.auth.uid;
      allow list: if isManagement() || isLoanOfficer(); // Loan officers query for their own borrowers
      allow create, update: if isManagement() || isLoanOfficer();
    }
    
    match /loans/{loanId} {
      function isBorrowerLoanOfficer() {
        let borrowerId = resource.data.borrowerId;
        return get(/databases/$(database)/documents/borrowers/$(borrowerId)).data.loanOfficerId == request.auth.uid;
      }
      allow get: if isManagement() || isBorrowerLoanOfficer();
      allow list: if isManagement() || isLoanOfficer();
      allow create, update: if isManagement() || isLoanOfficer();
    }

    // This rule allows collection group queries on 'payments'
    match /{path=**}/payments/{paymentId} {
        allow read, write: if isManagement() || isLoanOfficer();
    }

    match /situationReports/{reportId} {
       function isReportOwner() {
        return resource.data.reportedBy == request.auth.uid;
      }
       allow read: if isManagement() || isReportOwner();
       allow list: if isManagement() || isLoanOfficer();
       allow create: if isStaff();
       allow update: if isManagement(); // Only management can change status
    }

    match /conversations/{conversationId} {
      // A user can read a conversation or list conversations they are a participant in.
      allow get: if request.auth.uid in resource.data.participants;
      allow list: if request.auth.uid in resource.data.participants;
      
      // A user can create a conversation if their UID is in the participants list of the new document.
      allow create: if request.auth.uid in request.resource.data.participants;

      // Only a participant can update the `lastMessage` field.
      allow update: if request.auth.uid in resource.data.participants && request.resource.data.keys().hasOnly(['lastMessage']);
    }

    match /conversations/{conversationId}/messages/{messageId} {
      function isConversationParticipant() {
        return request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
      allow read, create: if isConversationParticipant();
    }

    match /accounts/{accountId} {
      allow read, write: if isManagement();
    }
    
    match /journal/{entryId} {
      allow read, write: if isManagement();
    }

    match /monthEndClosures/{closureId} {
        allow get: if isManagement();
        allow create: if isCfo() || isAdmin();
        allow update: if (isCeo() || isAdmin()) && resource.data.status == 'pending_approval' || (isCfo() || isAdmin()) && resource.data.status == 'approved';
    }
  }
}
