rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserRole() {
      return request.auth.token.role;
    }

    function isOneOfRoles(roles) {
      return isSignedIn() && getUserRole() in roles;
    }
    
    function isLoanOfficer() {
      return isOneOfRoles(['loan_officer']);
    }

    function isManager() {
      return isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    function isAdmin() {
      return isOneOfRoles(['admin']);
    }

    function isUser(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // --- Rules for Collections ---

    // Users can read their own profile. Admins and HR can read all profiles.
    // Users can update their own profile (e.g., displayName). Admins/HR can update any role.
    match /users/{userId} {
      allow read: if isUser(userId) || isOneOfRoles(['admin', 'hr']);
      allow create: if isSignedIn(); // New users create their own doc on first login
      allow update: if isUser(userId) || isOneOfRoles(['admin', 'hr']);
    }

    // Loan officers can only CRUD data for their own borrowers. Managers can read all.
    match /borrowers/{borrowerId} {
      allow read: if isManager() || (isLoanOfficer() && resource.data.loanOfficerId == request.auth.uid);
      allow create: if isLoanOfficer() && request.resource.data.loanOfficerId == request.auth.uid;
      allow update: if isManager() || (isLoanOfficer() && resource.data.loanOfficerId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Loan officers can CRUD loans for their borrowers. Managers can read all.
    match /loans/{loanId} {
      // To read a loan, you must have access to the borrower document it belongs to.
      allow read: if isManager() || (isLoanOfficer() && get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid);
      allow create: if isLoanOfficer() && get(/databases/$(database)/documents/borrowers/$(request.resource.data.borrowerId)).data.loanOfficerId == request.auth.uid;
      allow update: if isManager() || (isLoanOfficer() && get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid);
      
      // Payments subcollection
      match /payments/{paymentId} {
        allow read, create: if isManager() || (isLoanOfficer() && get(/databases/$(database)/documents/borrowers/$(getAfter(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId)).data.loanOfficerId == request.auth.uid);
      }
    }
    
    // Situation Reports
    match /situationReports/{reportId} {
        allow read, create: if isLoanOfficer() || isManager();
        allow update: if isManager(); // Only managers can update status
    }

    // Financial data is restricted to managers.
    match /accounts/{accountId} {
      allow read, create, update, delete: if isManager();
    }
    
    match /journal/{entryId} {
      allow read, create, update, delete: if isManager();
    }
    
    match /monthEndClosures/{closureId} {
        allow read, create, update: if isOneOfRoles(['cfo', 'ceo', 'admin']);
    }

    // Settings can only be read/written by CEO/Admin.
    match /settings/{settingId} {
      allow read, write: if isOneOfRoles(['admin', 'ceo']);
    }

    // Conversations can only be accessed by participants.
    match /conversations/{conversationId} {
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // Audit logs are read-only for admins. They are written by server-side functions.
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Can only be written by the admin backend
    }
  }
}
