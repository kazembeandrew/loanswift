rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user has a specific role
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if a user has one of several roles
    function hasOneOfRoles(roles) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole in roles;
    }
    
    // Check if the user's status is 'approved'
    function isApproved() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'approved';
    }

    // Default Deny: No access unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection
    // - Users can read their own document.
    // - Admins and HR can read all user documents.
    // - Users can be created by anyone (for signup), but only admins/HR can update them.
    match /users/{userId} {
      allow read: if (request.auth.uid == userId && isApproved()) || hasOneOfRoles(['admin', 'hr']);
      allow create: if request.auth.uid == userId;
      allow update: if hasOneOfRoles(['admin', 'hr']);
    }

    // Borrowers Collection
    // - Loan officers can only read/write borrowers assigned to them.
    // - C-level roles and admins can read all borrowers.
    match /borrowers/{borrowerId} {
      allow read: if isApproved() && (hasOneOfRoles(['admin', 'ceo', 'cfo']) || resource.data.loanOfficerId == request.auth.uid);
      allow write: if isApproved() && (hasOneOfRoles(['admin']) || request.resource.data.loanOfficerId == request.auth.uid);
    }
    
    // Loans Collection & Payments Subcollection
    // Access is derived from the parent borrower document.
    match /loans/{loanId} {
        // To read a loan, you must be able to read the borrower it belongs to.
        allow read: if isApproved() && (hasOneOfRoles(['admin', 'ceo', 'cfo']) || get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid);
        allow write: if isApproved() && (hasOneOfRoles(['admin']) || get(/databases/$(database)/documents/borrowers/$(request.resource.data.borrowerId)).data.loanOfficerId == request.auth.uid);
        
        // Payments subcollection inherits permissions from the parent loan.
        match /payments/{paymentId} {
            allow read, write: if isApproved() && (hasOneOfRoles(['admin', 'ceo', 'cfo']) || get(/databases/$(database)/documents/loans/$(loanId)).data.loanOfficerId == request.auth.uid);
        }
    }
    
    // Situation Reports
    // Loan officers can create. Managers can read all.
    match /situationReports/{reportId} {
        allow read: if isApproved() && hasOneOfRoles(['admin', 'ceo', 'cfo']);
        allow create: if isApproved() && hasOneOfRoles(['admin', 'ceo', 'cfo', 'loan_officer']);
        allow update: if isApproved() && hasOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    // Chat / Conversations
    // Users can only access conversations they are a part of.
    match /conversations/{conversationId} {
        allow read, write: if isApproved() && request.auth.uid in resource.data.participants;
        
        match /messages/{messageId} {
            allow read, write: if isApproved() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
    }

    // Financials (Chart of Accounts, Journal)
    // - Only C-level roles and admins can read/write.
    match /accounts/{accountId} {
        allow read, write: if isApproved() && hasOneOfRoles(['admin', 'ceo', 'cfo']);
    }
    
    match /journal/{entryId} {
        allow read, write: if isApproved() && hasOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    // Month End Closures
    // - CFO/Admin can initiate and process.
    // - CEO/Admin can approve.
    match /monthEndClosures/{periodId} {
        allow read: if isApproved() && hasOneOfRoles(['admin', 'ceo', 'cfo']);
        allow write: if isApproved() && hasOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    // Settings
    // - Only admins and C-level can read/write.
    match /settings/{settingsId} {
        allow read, write: if isApproved() && hasOneOfRoles(['admin', 'ceo', 'cfo']);
    }
    
    // Audit Logs
    // - Only admins can read.
    // - Write access is handled by backend functions (server-side only).
    match /audit_logs/{logId} {
        allow read: if hasRole('admin');
        allow write: if false; // Can only be written by the backend
    }
  }
}
