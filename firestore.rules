rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isRole(role) {
      return request.auth.token.role == role;
    }
    
    function isOneOfRoles(roles) {
        return request.auth.token.role in roles;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getRole() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // --- Collections ---

    // USERS: Users can read/update their own profile. Admins can read/write any profile.
    match /users/{userId} {
      allow read, update: if isAuthenticated() && (isOwner(userId) || isRole('admin'));
      allow create: if isAuthenticated(); // Handled by server-side action
      allow delete: if isRole('admin');
    }

    // BORROWERS: Loan officers can manage their own borrowers. C-level/Admins can view all.
    match /borrowers/{borrowerId} {
        allow read: if isAuthenticated() && (resource.data.loanOfficerId == request.auth.uid || isOneOfRoles(['admin', 'ceo', 'cfo']));
        allow create, update: if isAuthenticated() && (request.resource.data.loanOfficerId == request.auth.uid || isRole('admin'));
        allow delete: if isRole('admin');
    }
    
    // LOANS & PAYMENTS: Access is determined by access to the parent borrower.
    match /loans/{loanId} {
        // Allow read/write if the user is the assigned loan officer for the borrower of this loan.
        allow read, create, update: if isAuthenticated() && (get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid || isOneOfRoles(['admin', 'ceo', 'cfo']));
        allow delete: if isRole('admin');
        
        // PAYMENTS SUBCOLLECTION
        match /payments/{paymentId} {
             allow read, create, update: if isAuthenticated() && (get(/databases/$(database)/documents/borrowers/$(get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId)).data.loanOfficerId == request.auth.uid || isOneOfRoles(['admin', 'ceo', 'cfo']));
             allow delete: if isRole('admin');
        }
    }

    // SITUATION REPORTS: Loan officers can create for their borrowers. Management can read all.
    match /situationReports/{reportId} {
       allow create: if isAuthenticated() && (get(/databases/$(database)/documents/borrowers/$(request.resource.data.borrowerId)).data.loanOfficerId == request.auth.uid);
       allow read, update: if isAuthenticated() && (get(/databases/$(database)/documents/borrowers/$(resource.data.borrowerId)).data.loanOfficerId == request.auth.uid || isOneOfRoles(['admin', 'ceo', 'cfo']));
       allow delete: if isRole('admin');
    }
    
    // FINANCIALS: C-level roles and Admin only
    match /accounts/{accountId} {
        allow read, create, update, delete: if isAuthenticated() && isOneOfRoles(['admin', 'ceo', 'cfo']);
    }
    match /journal/{entryId} {
        allow read, create, update, delete: if isAuthenticated() && isOneOfRoles(['admin', 'ceo', 'cfo']);
    }
     match /monthEndClosures/{closureId} {
        allow read, create, update, delete: if isAuthenticated() && isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    // SETTINGS: Admin and C-level can read, only admin/cfo can write.
    match /settings/{settingId} {
        allow read: if isAuthenticated() && isOneOfRoles(['admin', 'ceo', 'cfo']);
        allow create, update: if isAuthenticated() && isOneOfRoles(['admin', 'cfo']);
    }
    
    // CHAT: Only participants of a conversation can read/write to it.
    match /conversations/{conversationId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    // ADMIN ONLY
    match /audit_logs/{logId} {
        allow read: if isAuthenticated() && isRole('admin');
        // Logs are created server-side only.
        allow create, update, delete: if false;
    }
  }
}
