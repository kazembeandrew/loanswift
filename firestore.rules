rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOneOfRoles(roles) {
      return isSignedIn() && request.auth.token.role in roles;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    function getRole() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isLoanOfficerForBorrower(borrowerId) {
        let borrower = get(/databases/$(database)/documents/borrowers/$(borrowerId)).data;
        return borrower.loanOfficerId == request.auth.uid;
    }

    // --- Collection Rules ---

    // Users can read their own profile, admins/hr can read all.
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isOneOfRoles(['admin', 'hr']));
      allow write: if isOneOfRoles(['admin', 'hr']); // Only admins/hr can create/update users.
      // A special case for new user signup.
      allow create: if !isOneOfRoles(['admin', 'hr']);
    }
    
    // Admins and C-level roles can manage settings
    match /settings/{docId} {
        allow read, write: if isOneOfRoles(['admin', 'ceo']);
    }

    // Admins can read audit logs. Write is handled by server-side actions.
    match /audit_logs/{logId} {
        allow read: if isOneOfRoles(['admin']);
        allow write: if false; // Only backend can write
    }

    // C-Level roles and Admins can manage the full accounting suite
    match /accounts/{accountId} {
        allow read, write: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    match /journal/{entryId} {
        allow read, write: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    match /monthEndClosures/{closureId} {
        allow read, write: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    // C-level roles can read all borrowers. Loan officers can only read their own.
    match /borrowers/{borrowerId} {
      allow read: if isOneOfRoles(['admin', 'ceo', 'cfo']) || (isOneOfRoles(['loan_officer']) && isLoanOfficerForBorrower(borrowerId));
      allow create, update: if isOneOfRoles(['admin', 'ceo', 'cfo', 'loan_officer']);
      allow delete: if isOneOfRoles(['admin']);
    }

    // Loan officers can create loans for their borrowers. C-Level can read all.
    match /loans/{loanId} {
      allow read: if isOneOfRoles(['admin', 'ceo', 'cfo']) || (isOneOfRoles(['loan_officer']) && isLoanOfficerForBorrower(request.resource.data.borrowerId));
      allow create: if isOneOfRoles(['admin', 'ceo', 'cfo', 'loan_officer']);
      allow update: if isOneOfRoles(['admin', 'ceo', 'cfo', 'loan_officer']); // For balance updates etc.
      allow delete: if isOneOfRoles(['admin']);

      // Payments subcollection
      match /payments/{paymentId} {
          allow read: if isOneOfRoles(['admin', 'ceo', 'cfo']) || isLoanOfficerForBorrower(get(/databases/$(database)/documents/loans/$(loanId)).data.borrowerId);
          allow create: if isOneOfRoles(['admin', 'ceo', 'cfo', 'loan_officer']);
          allow delete: if isOneOfRoles(['admin']);
      }
    }
    
    // Situation Reports
    match /situationReports/{reportId} {
        allow read: if isOneOfRoles(['admin', 'ceo', 'cfo']) || isLoanOfficerForBorrower(resource.data.borrowerId);
        allow create: if isOneOfRoles(['loan_officer']);
        allow update: if isOneOfRoles(['admin', 'ceo', 'cfo']); // For status updates
        allow delete: if isOneOfRoles(['admin']);
    }

    // Chat functionality
    match /conversations/{conversationId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
      }
    }

  }
}
