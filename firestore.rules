
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      return request.auth.token.role == role;
    }

    function isOneOfRoles(roles) {
        return request.auth.token.role in roles;
    }
    
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    // Admins have full access to everything, always.
    match /{document=**} {
        allow read, write: if isRole('admin');
    }

    // Rules for specific collections
    
    match /users/{userId} {
      allow get, list: if isAuth();
      allow update: if isOwner(userId);
      // Create and delete are handled by admin functions, not directly by users.
    }
    
    match /borrowers/{borrowerId} {
        allow get, list: if isOneOfRoles(['ceo', 'cfo', 'loan_officer']);
        allow create, update: if isOneOfRoles(['loan_officer']);
    }

    match /loans/{loanId} {
        allow get, list: if isOneOfRoles(['ceo', 'cfo', 'loan_officer']);
        allow create, update: if isOneOfRoles(['loan_officer']);
    }

    match /loans/{loanId}/payments/{paymentId} {
        // Rule for direct access to a payment document (e.g., get)
        allow get: if isOneOfRoles(['ceo', 'cfo', 'loan_officer']);
        allow create: if isOneOfRoles(['loan_officer']);
    }
    
    // Rule for the collection group query on 'payments'
    match /{path=**}/payments/{paymentId} {
       allow list: if isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    match /settings/{docId} {
        allow get: if isAuth();
        allow update: if isRole('admin');
    }

    match /conversations/{conversationId} {
      allow get, list: if request.auth.uid in resource.data.participants;
      allow create: if request.auth.uid in request.resource.data.participants;
    }

    match /conversations/{conversationId}/messages/{messageId} {
      allow get, list, create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }
    
    match /accounts/{accountId} {
      allow get, list, create, update: if isOneOfRoles(['ceo', 'cfo']);
    }
    
    match /journal/{entryId} {
      allow get, list, create, update: if isOneOfRoles(['ceo', 'cfo']);
    }
    
    match /monthEndClosures/{closureId} {
      allow get, list: if isOneOfRoles(['ceo', 'cfo']);
      allow create, update: if isOneOfRoles(['ceo', 'cfo']);
    }
    
    match /situationReports/{reportId} {
        allow get, list, create, update: if isOneOfRoles(['ceo', 'cfo', 'loan_officer']);
    }
  }
}
