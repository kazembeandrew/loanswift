rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function hasRole(role) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isOneOfRoles(roles) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    function isLoanOfficerForBorrower(borrowerId) {
        return isAuth() && get(/databases/$(database)/documents/borrowers/$(borrowerId)).data.loanOfficerId == request.auth.uid;
    }
    
    // Admins, CEOs, and CFOs have wide-ranging read/write access for management purposes.
    function isManagement() {
        return isOneOfRoles(['admin', 'ceo', 'cfo']);
    }

    // USER PROFILES
    match /users/{userId} {
      allow read: if isAuth();
      allow write: if isOwner(userId) || hasRole('admin') || hasRole('hr');
    }

    // SETTINGS (Admin only)
    match /settings/{docId} {
      allow read, write: if hasRole('admin');
    }

    // BORROWERS
    match /borrowers/{borrowerId} {
      allow get: if isManagement() || isLoanOfficerForBorrower(borrowerId);
      allow list: if isManagement(); // Allows CEO/Admin to get all borrowers
      allow create, update: if isAuth(); // Further checked by service logic, but open for loan officers
    }

    // LOANS & PAYMENTS
    // This rule allows a collection group query on 'payments' by management roles
    match /{path=**}/payments/{paymentId} {
      allow list, get: if isManagement();
      allow create: if isAuth();
    }
    
    match /loans/{loanId} {
      allow get: if isAuth();
      allow list: if isManagement();
      allow create, update: if isAuth();

      // For accessing a specific loan's payment subcollection
      match /payments/{paymentId} {
          allow get, list: if isAuth();
          allow create, update: if isAuth();
      }
    }
    
    // SITUATION REPORTS
    match /situationReports/{reportId} {
       allow get: if isManagement() || isLoanOfficerForBorrower(resource.data.borrowerId);
       allow list: if isManagement();
       allow create: if isAuth();
       allow update: if isManagement();
    }

    // CHAT
    match /conversations/{conversationId} {
        allow get, list: if isAuth() && request.auth.uid in resource.data.participants;
        allow create: if isAuth() && request.auth.uid in request.resource.data.participants;

        match /messages/{messageId} {
            allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
    }

    // ACCOUNTING (CFO, CEO, Admin only)
    match /accounts/{accountId} {
        allow read, write: if isManagement();
    }
    match /journal/{entryId} {
        allow read, write: if isManagement();
    }
    match /monthEndClosures/{closureId} {
        allow get, list: if isManagement();
        allow create: if hasRole('cfo') && request.resource.data.initiatedBy == request.auth.uid;
        allow update: if (hasRole('ceo') && request.resource.data.status == 'approved') || 
                         (hasRole('cfo') && resource.data.status == 'approved');
    }
  }
}
