rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function userHasRole(roles) {
      return request.auth != null 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    function isAdmin() {
      return userHasRole(['ceo', 'admin', 'cfo']);
    }

    function isLoanOfficerOrAbove() {
      return userHasRole(['loan_officer', 'ceo', 'admin', 'cfo', 'hr']);
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId || isAdmin() || userHasRole(['hr']);
    }

    match /borrowers/{borrowerId} {
      allow read, write: if isLoanOfficerOrAbove();
    }
    
    match /loans/{loanId} {
      allow read, write: if isLoanOfficerOrAbove();
    }

    match /accounts/{accountId} {
        allow read, write: if isAdmin();
    }
    
    match /journal/{entryId} {
        allow read, write: if isAdmin();
    }

    match /settings/{settingId} {
        allow read: if isLoanOfficerOrAbove();
        allow write: if isAdmin();
    }
    
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
    }

    match /situationReports/{reportId} {
      allow read, write: if isLoanOfficerOrAbove();
    }
    
    // This rule is required for collection group queries on 'payments'
    match /{path=**}/payments/{paymentId} {
      allow read, write: if isLoanOfficerOrAbove();
    }

    match /{path=**}/messages/{messageId} {
      allow read, write: if request.auth != null; // Further security can be added if needed
    }
  }
}
